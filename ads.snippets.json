{
       // Place your snippets for sql here. Each snippet is defined under a snippet name and has a prefix, body and
       // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
       // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
       // same ids are connected.
       // Example:
       // "Print to console": {
       //     "prefix": "log",
       //     "body": [
       //            "console.log('$1');",
       //            "$2"
       //     ],
       //     "description": "Log output to console"
       // }
       "ssf": {
              "prefix": "ssf",
              "body": "SELECT * FROM $0",
              "description": "Select All snippet"
       },
       "sst" : {
              "prefix": "sst",
              "body": "SELECT TOP 10 * FROM $0",
              "description": "Select Top 10 snippet"
       },
       "ssc" : {
              "prefix": "ssc",
              "body": "SELECT COUNT(*) FROM $0",
              "description": "Select Count snippet"
       },
       "s" : {
              "prefix": "s",
              "body": "SELECT $0",
              "description": "Select snippet"
       },
       "s*" : {
              "prefix": "s*",
              "body": "SELECT * $0",
              "description": "Select * snippet"
       },
       "st" : {
              "prefix": "st",
              "body": "SELECT TOP 10 $0",
              "description": "Select Top 10 snippet"
       },
       "st*" : {
              "prefix": "st*",
              "body": "SELECT TOP 10 * $0",
              "description": "Select Top 10 * snippet"
       },
       "ssd" : {
              "prefix": "ssd",
              "body": "SELECT DISTINCT ${3:*} FROM ${1:dbo}.${2:TableName}",
              "description": "Select Distinct snippet"
       },
       "nnds": {
              "prefix": "nnds",
              "body": "NOT NULL DEFAULT SPACE $0",
              "description": "Adds to column not null and default space snippet"
       },
       "ds": {
              "prefix": "ds",
              "body": "DEFAULT SPACE $0",
              "description": "Default space snippet"
       },
       "cr": {
              "prefix": "cr",
              "body": ["CREATE"],
              "description": "Create snippet"
       },
       "crt": {
              "prefix": "crt",
              "body": ["CREATE TABLE ${1:dbo}.${2:TableName}", "(", "\t", ")"],
              "description": "Create table snippet"
       },
       "crtab": {
              "prefix": "crtab",
              "body": ["CREATE TABLE ${1:dbo}.${2:TableName}","(\n\t$1Id INT IDENTITY(1,1) NOT NULL",
                            "\t,LastUpdateDate datetime2 NOT NULL DEFAULT(SYSDATETIME())",
                            "\t,LastUpdateId varchar(64) NOT NULL DEFAULT(SYSTEM_USER)",
                            "\t,CONSTRAINT [PK_$2_$1] PRIMARY KEY CLUSTERED ",
                            "\t(\n\t\t$1Id ASC",
                            "\t)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]",
                            ") ON [PRIMARY]"
                     ],
              "description": "Full create table with last columns"
       },
       "crtv": {
              "prefix": "crtv",
              "body": ["DECLARE ${1:TableName} TABLE ", "(", "\t", ")"],
              "description": "Create table variable snippet"
       },
       "crtt": {
              "prefix": "crtt",
              "body": ["CREATE TABLE #${1:TableName}", "(", "\t", ")"],
              "description": "Create temp table snippet"
       },
       "crti": {
              "prefix": "crti",
              "body": ["CREATE TABLE ${1:dbo}.${2:TableName}", "(", "\t$1Id INT IDENTITY(1, 1) NOT NULL", ")"],
              "description": "Create table with identity snippet"
       },
       "crtu": {
              "prefix": "crtu",
              "body": ["CREATE TABLE ${1:dbo}.${2:TableName}", "(", "\tId UNIQUEIDENTIFIER NOT NULL", ")"],
              "description": "Create table with unique identifier snippet"
       },
       "rwn": {
              "prefix": "rwn",
              "body": "ROW_NUMBER() OVER(PARTITION BY ${1:ColumnName} ORDER BY $1) rw",
              "description": "Row number column snippet"
       },
       "de" : {
              "prefix": "de",
              "body": "DELETE $0",
              "description": "Delete snippet"
       },
       "dt" : {
              "prefix": "dt",
              "body": "DROP TABLE $0",
              "description": "Delete snippet"
       },
       "f" : {
              "prefix": "f",
              "body": "FROM $0",
              "description": "From snippet"
       },
       "w" : {
              "prefix": "w",
              "body": "WHERE $0",
              "description": "Where snippet"
       },
       "w1" : {
              "prefix": "w1",
              "body": ["WHERE 1=1", "\tAND $0"],
              "description": "Where snippet"
       },
       "x" : {
              "prefix": "x",
              "body": "EXECUTE $0",
              "description": "Execute snippet"
       },
       "u" : {
              "prefix": "u",
              "body": "UPDATE $0",
              "description": "Update snippet"
       },
       "l" : {
              "prefix": "l",
              "body": "LEFT $0",
              "description": "Left snippet"
       },
       "r" : {
              "prefix": "r",
              "body": "RIGHT $0",
              "description": "Right snippet"
       },
       "i" : {
              "prefix": "i",
              "body": "INSERT $0",
              "description": "Insert snippet"
       },
       "tt" : {
              "prefix": "tt",
              "body": "TRUNCATE TABLE ${1:dbo}.${2:TableName}",
              "description": "Execute snippet"
       },
       "ex" : {
              "prefix": "ex",
              "body": "EXISTS $0",
              "description": "Exists snippet"
       },
       "ne" : {
              "prefix": "ne",
              "body": "NOT EXISTS $0",
              "description": "Not Exists snippet"
       },

       "sp" : {
              "prefix": "sp",
              "body": "EXEC sp_help '${1:dbo}.${2:TableName}'",
              "description": "sp_help snippet"
       },
       "spt" : {
              "prefix": "spt",
              "body": "EXEC sp_helptext '${1:dbo}.${2:TableName}'",
              "description": "sp_helptext snippet"
       },
       "spd" : {
              "prefix": "spd",
              "body": "EXEC sp_depends '${1:dbo}.${2:TableName}'",
              "description": "sp_depends snippet"
       },
       "w2" : {
              "prefix": "w2",
              "body": "sp_who2 $0",
              "description": "sp_who2 snippet"
       },
       "gb" : {
              "prefix": "gb",
              "body": "GROUP BY $0",
              "description": "Group By snippet"
       },
       "ii" : {
              "prefix": "ii",
              "body": "INSERT INTO ${1:dbo}.${2:TableName}",
              "description": "Insert Into snippet"
       },
       "h" : {
              "prefix": "h",
              "body": "HAVING $0",
              "description": "Group By snippet"
       },
       "hc" : {
              "prefix": "hc",
              "body": "HAVING COUNT(${1:ColumnName}) > 1",
              "description": "Group By snippet"
       },
       "id" : {
              "prefix": "id",
              "body": "BIGINT IDENTITY(1, 1) NOT NULL",
              "description": "Id snippet"
       },
       "bigid" : {
              "prefix": "bigid",
              "body": "BIGINT IDENTITY(1, 1) NOT NULL",
              "description": "Id snippet"
       },
       "rj" : {
              "prefix": "rj",
              "body": "RIGHT JOIN $0",
              "description": "Right Join snippet"
       },
       "lj" : {
              "prefix": "lj",
              "body": "LEFT JOIN $0",
              "description": "Left Join snippet"
       },
       "ij" : {
              "prefix": "ij",
              "body": "INNER JOIN $0",
              "description": "Inner Join snippet"
       },
       "fj" : {
              "prefix": "fj",
              "body": "FULL JOIN $0",
              "description": "Full Join snippet"
       },
       "cj" : {
              "prefix": "cj",
              "body": "CROSS JOIN $0",
              "description": "Cross Join snippet"
       },
       "jo" : {
              "prefix": "jo",
              "body": "JOIN $0",
              "description": "Join snippet"
       },
       "coa" : {
              "prefix": "coa",
              "body": "COALESCE($0, SPACE(0))",
              "description": "Coalesce snippet"
       },
       "waterfall" : {
              "prefix": "waterfall",
              "body": "--               _             __      _ _ \n--              | |           / _|    | | |\n--__      ____ _| |_ ___ _ __| |_ __ _| | |\n--\\ \\ /\\ / / _` | __/ _ \\ '__|  _/ _` | | |\n-- \\ V  V / (_| | ||  __/ |  | || (_| | | |\n--  \\_/\\_/ \\__,_|\\__\\___|_|  |_| \\__,_|_|_|\n$0",
              "description": "A funny logo of waterfall snippet"
       },
       "wtf" : {
              "prefix": "wtf",
              "body": "--WTF???!??!  AAAAAARRRRRRRRRRGGGGGGGGHHHHHHHHHHHHHHHHHHH!!!!!!!!!!!!!!!!!!",
              "description": "A wtf snippet"
       },
       "restore": {
              "prefix": "restore",
              "body": ["SELECT  * FROM msdb..restorehistory ", "WHERE 1=1", "\tAND destination_database_name = '${1:DatabaseName}'", "ORDER BY restore_date DESC"],
              "description": "Check restored database snippet"
       },
       "now" : {
              "prefix": "now",
              "body": "DECLARE @Now datetime2 = SYSDATETIME()",
              "description": "Create a date for now snippet"
       },
       "today" : {
              "prefix": "today",
              "body": "DECLARE @Today datetime2 = DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0);",
              "description": "Create a date for now snippet"
       },
       "dp" : {
              "prefix": "dp",
              "body": "DROP PROCEDURE '${2:dbo}.${1:ProcedureName}'",
              "description": "Drop Procedure snippet"
       },
       "ift" : {
              "prefix": "ift",
              "body": "IF OBJECT_ID('$0') > 0",
              "description": "if object exists snippet"
       },
       "iftt" : {
              "prefix": "iftt",
              "body": "IF OBJECT_ID('tempdb..$0') < 0",
              "description": "if temp object exists snippet"
       },
       "ua" : {
              "prefix": "ua",
              "body": "UNION ALL $0",
              "description": "Union all snippet"
       },
       "un" : {
              "prefix": "un",
              "body": "UNION $0",
              "description": "Union snippet"
       },
       "ob" : {
              "prefix": "ob",
              "body": "ORDER BY $0",
              "description": "Order By snippet"
       },
       "ca" : {
              "prefix": "ca",
              "body": "CROSS APPLY $0",
              "description": "Cross Apply snippet"
       },
       "oa" : {
              "prefix": "oa",
              "body": "OUTER APPLY $0",
              "description": "Outer Apply snippet"
       },
       "dv" : {
              "prefix": "dv",
              "body": "DROP VIEW $0",
              "description": "Drop View snippet"
       },
       "uncom" : {
              "prefix": "uncom",
              "body": "SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;",
              "description": "Set read uncommitted snippet"
       },
       "idento" : {
              "prefix": "idento",
              "body": "SET IDENTITY_INSERT ${1:dbo}.${2:TableName} ON;",
              "description": "Set identity on table snippet"
       },
       "identf" : {
              "prefix": "identf",
              "body": "SET IDENTITY_INSERT ${1:dbo}.${2:TableName} OFF;",
              "description": "Set identity off table snippet"
       },
       "lui" : {
              "prefix": "lui",
              "body": "LastUpdateId varchar(64) NOT NULL DEFAULT(SYSTEM_USER)",
              "description": "Default column for last update id snippet"
       },
       "lud" : {
              "prefix": "lud",
              "body": "LastUpdateDate datetime2 NOT NULL DEFAULT(SYSDATETIME())..",
              "description": "Default column for last update id snippet"
       },
       "df" : {
              "prefix": "df",
              "body": "DELETE FROM $0",
              "description": "Delete From snippet"
       },
       "nn" : {
              "prefix": "nn",
              "body": "NOT NULL",
              "description": "Not Null snippet"
       },
       "ni" : {
              "prefix": "ni",
              "body": "NOT IN ($0)",
              "description": "Not In snippet"
       },
       "inn" : {
              "prefix": "inn",
              "body": "IS NOT NULL",
              "description": "Is Not Null snippet"
       },
       "bt" : {
              "prefix": "bt",
              "body": "BEGIN TRANSACTION;",
              "description": "Begin Tranx snippet"
       },
       "future": {
              "prefix": "future",
              "body": "DECLARE @Future DATETIME2 = DATEADD(dd, DATEDIFF(dd, 0, '9999-12-31'), 0);",
              "description": "Define high value datetime snippet"
       },
       "dupes": {
              "prefix": "dupes",
              "body": [";with dupes as", "(", "\tSELECT ROW_NUMBER() OVER (PARTITION BY ${2:ColumnName} ORDER BY $2) rw", "\t,*", "\tFROM ${1:TableName}", ")", "\nSELECT * FROM dupes WHERE rw > 1;"],
              "description": "dupes logic to calculate duplicates snippet"
       },
       "cancelssis": {
              "prefix": "cancelssis",
              "body": "EXEC ssisdb.catalog.stop_operation @operation_id = $0",
              "description": "Cancel SSIS execution snippet"
       },
       "sno" : {
              "prefix": "sno",
              "body": "SET NOCOUNT ON;",
              "description": "Set nocount on snippet"
       },
       "snof" : {
              "prefix": "snof",
              "body": "SET NOCOUNT OFF;",
              "description": "Set nocount off snippet"
       },
       "var" : {
              "prefix": "var",
              "body": "varchar($0)",
              "description": "varchar snippet"
       },
       "nvar" : {
              "prefix": "nvar",
              "body": "nvarchar($0)",
              "description": "nvarchar snippet"
       },
       "xacn" : {
              "prefix": "xacn",
              "body": "SET XACT_ABORT ON;",
              "description": "Set transaction abort on snippet"
       },
       "xaco" : {
              "prefix": "xaco",
              "body": "SET XACT_ABORT OFF;",
              "description": "Set transaction abort off snippet"
       },
       "schema_" : {
              "prefix": "schema_",
              "body": ["DECLARE @Schema varchar(MAX) = '$0'", "\nIF NOT EXISTS (\nSELECT  schema_name",
                            "FROM    information_schema.schemata",
                            "WHERE   schema_name = @Schema )",
                            "BEGIN",
                            "\tDECLARE @SQL varchar(MAX) =  N'CREATE SCHEMA ' + @Schema",
                            "\tEXEC (@SQL)",
                            "END\nGO\n"],
              "description": "Schema creation snippet"
       },
       "index_" : {
              "prefix": "index_",
              "body": ["DECLARE @schema NVARCHAR(64);\nDECLARE @table NVARCHAR(128);",
                            "\n\nSET @schema = '';\nSET @table = '$0';\n",
                            "SELECT  * \nFROM sys.schemas s\nINNER JOIN sys.tables t",
                            "\tON s.SCHEMA_ID = t.SCHEMA_ID\nINNER JOIN sys.indexes i",
                            "\tON i.OBJECT_ID = t.OBJECT_ID\nWHERE t.name = @table",
                            "\tAND (s.name = @schema OR @schema = '');"],
              "description": "Index lookup snippet"
       },
       "queries_" : {
              "prefix": "queries_",
              "body": ["SELECT sqltext.TEXT,\n\treq.session_id,\n\treq.status,",
                            "\treq.command,\n\treq.cpu_time,\n\treq.total_elapsed_time",
                            "FROM sys.dm_exec_requests req\nCROSS APPLY sys.dm_exec_sql_text(sql_handle) AS sqltext"],
              "description": "Running queries snippet"
       },
       "seekc" : {
              "prefix": "seekc",
              "body": ["DECLARE @name varchar(256)\nSELECT @name = '$0'\n\nSELECT c.name AS ColName,",
                            "\tCASE\n\t\tWHEN c.is_nullable = 1\n\t\tTHEN 'NULL'\n\t\tELSE 'NOT NULL'",
                            "\tEND AS Nullable,\n\ts.name + '.' + t.name AS TableName\nFROM sys.columns c",
                            "\tJOIN sys.tables t ON c.object_id = t.object_id",
                            "\tJOIN sys.schemas s\n\tON s.schema_id = t.schema_id",
                            "WHERE  c.name LIKE '%' + @name +'%'\nGO"],
              "description": "Seek columns on database snippet"
       },
       "seeko" : {
              "prefix": "seeko",
              "body": ["DECLARE @SearchStr VARCHAR(100)\n\nSELECT @SearchStr = '$0'\n\nSET nocount ON",
                     "\nSELECT DISTINCT s.name + '.' + Object_name(c.id) AS 'Object name',",
                     "\t\t\tCASE",
                     "\t\t\tWHEN Objectproperty(c.id, 'IsReplProc') = 1",
                     "\t\t\tTHEN 'Replication stored procedure'",
                     "\t\t\tWHEN Objectproperty(c.id, 'IsExtendedProc') = 1",
                     "\t\t\tTHEN 'Extended stored procedure'",
                     "\t\t\tWHEN Objectproperty(c.id, 'IsProcedure') = 1",
                     "\t\t\tTHEN 'Stored Procedure'",
                     "\t\t\tWHEN Objectproperty(c.id, 'IsTrigger') = 1",
                     "\t\t\tTHEN 'Trigger'",
                     "\t\t\tWHEN Objectproperty(c.id, 'IsTableFunction') = 1",
                     "\t\t\tTHEN 'Table-valued function'",
                     "\t\t\tWHEN Objectproperty(c.id, 'IsScalarFunction') = 1",
                     "\t\t\tTHEN 'Scalar-valued function'",
                     "\t\t\tWHEN Objectproperty(c.id, 'IsInlineFunction') = 1",
                     "\t\t\tTHEN 'Inline function'",
                     "\t\t\tEND AS 'Object type',",
                     "\t\t\t'EXEC sp_helptext ''' + s.name + '.' + Object_name(c.id) + '''' ",
                     "\t\t\t'Run this command to see the object text' ,",
                     "\t\t\t[text] 'Resulting text'",
                     "FROM   syscomments c",
                     "\t\tJOIN sys.objects o",
                     "\t\t\tON c.id = o.object_id",
                     "\t\tJOIN sys.schemas s",
                     "\t\t\tON s.schema_id = o.schema_id",
                     "WHERE  c.TEXT LIKE '%' + @SearchStr + '%'",
                     "\t\tAND encrypted = 0",
                     "\t\tAND ( Objectproperty(c.id, 'IsReplProc') = 1",
                     "\t\t\tOR Objectproperty(c.id, 'IsExtendedProc') = 1",
                     "\t\t\tOR Objectproperty(c.id, 'IsProcedure') = 1",
                     "\t\t\tOR Objectproperty(c.id, 'IsTrigger') = 1",
                     "\t\t\tOR Objectproperty(c.id, 'IsTableFunction') = 1",
                     "\t\t\tOR Objectproperty(c.id, 'IsScalarFunction') = 1",
                     "\t\t\tOR Objectproperty(c.id, 'IsInlineFunction') = 1 )",
                     "ORDER  BY 'Object type',",
                     "\t'Object name'"],
              "description": "Seek objects on database snippet"
       },
       "proc_": {
              "prefix": "proc_",
              "body": ["SET ANSI_NULLS ON;\nGO\n\nSET QUOTED_IDENTIFIER ON;\n\nCREATE OR ALTER PROC ${1:ProcedureName}",
                            "( )\nAS\nBEGIN\n\tSET NOCOUNT ON;\n\tSET XACT_ABORT ON;\n",
                            "END\nGO"],
              "description": "Procedure creation snippet"
       },
       "func_": {
              "prefix": "func_",
              "body": ["CREATE FUNCTION ${1:FunctionName}(\n\n)\nRETURNS ${2:ReturnType}\nAS\nBEGIN\n\n\tRETURN\nEND\nGO"],
              "description": "Function creation snippet"
       },
       "size_": {
              "prefix": "size_",
              "body": ["SET NOCOUNT ON;\nDBCC UPDATEUSAGE(0) \n-- DB size.\nEXEC sp_spaceused",
                     "-- Table row counts and sizes.\nCREATE TABLE #t\n(",
                     "\t[name] NVARCHAR(128),\n\t[rows] CHAR(11),\n\treserved VARCHAR(18),\n\tdata VARCHAR(18),",
                     "\tindex_size VARCHAR(18),\n\tunused VARCHAR(18)\n)\n",
                     "INSERT #t EXEC sp_msForEachTable 'EXEC sp_spaceused ''?'''",
                     "SELECT * \nFROM #t \n-- # of rows. \nSELECT SUM(CAST([rows] AS int)) AS [rows]",
                     "FROM #t \nDROP TABLE #t"],
              "description": "Size validation snippet"
       },
       "constraint_": {
              "prefix": "constraint_",
              "body": ["SELECT\n--Add Constraints\n'ALTER TABLE [' + s.NAME + '].[' + t.NAME",
                     "+ '] ADD CONSTRAINT [' + f.NAME\n+ '] FOREIGN KEY(' + c.NAME + ') REFERENCES ['",
                     "+ rs.NAME + '].[' + rt.NAME + '] (' + rc.NAME + ');' + CHAR(13)+CHAR(10) + 'GO' AS [Add_Constraints]",
                     "--Remove Constraints\n,\n'IF EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME = ''' + f.Name +''') ALTER TABLE [' + s.NAME + '].[' + t.NAME",
                     "+ '] DROP CONSTRAINT [' + f.NAME + '];' + CHAR(13)+CHAR(10) + 'GO' AS [Remove_Contraints]",
                     "FROM   sys.foreign_keys f \n\t\tINNER JOIN sys.foreign_key_columns AS fk",
                     "\t\t\tON f.object_id = fk.constraint_object_id\n\t\tINNER JOIN sys.tables AS t",
                     "\t\t\tON fk.parent_object_id = t.object_id\n\t\tINNER JOIN sys.schemas AS s",
                     "\t\t\tON s.schema_id = t.schema_id\n\t\tINNER JOIN sys.columns AS c",
                     "\t\t\tON fk.parent_object_id = c.object_id\n\t\t\tAND fk.parent_column_id = c.column_id",
                     "\t\tINNER JOIN sys.tables AS rt\n\t\t\tON rt.object_id = fk.referenced_object_id",
                     "\t\tINNER JOIN sys.schemas AS rs\n\t\t\tON rs.schema_id = rt.schema_id",
                     "\t\tINNER JOIN sys.columns AS rc\n\t\t\tON rc.object_id = fk.referenced_object_id",
                     "\t\t\tAND fk.referenced_column_id = rc.column_id"],
              "description": "Size validation snippet"
       },
       "catch_": {
              "prefix": "catch_",
              "body": ["BEGIN CATCH\n\tDECLARE @ErrorMessage NVARCHAR(4000);",
                            "\tDECLARE @ErrorSeverity INT;\n\tDECLARE @ErrorState INT;",
                            "\tSELECT\n\t\t@ErrorMessage = ERROR_MESSAGE(),\n\t\t@ErrorSeverity = ERROR_SEVERITY(),",
                            "\t\t@ErrorState = ERROR_STATE();\n\n\tRAISERROR (@ErrorMessage, -- Message text.",
                            "\t\t\t@ErrorSeverity, -- Severity.\n\t\t\t@ErrorState -- State.\n\t);",
                            "END CATCH"],
              "description": "Catch snippet"
       },
       "primary_" : {
              "prefix": "primary_",
              "body": ["CONSTRAINT [PK_PrimaryKey] PRIMARY KEY CLUSTERED\n\t(,",
                             "\t\t$0 ASC\n\t)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON,ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]",
                             ") ON [PRIMARY]"],
              "description": ""
       }
}
